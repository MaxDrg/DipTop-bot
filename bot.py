import asyncio
import datetime
import logging
import aioschedule
from config import Config
from database import Database
from buttons import Button
from schedulers import Scheduler
from aiogram import executor, types
from add_functions import Add_function
from states import States
from yoomoney import Quickpay
from check import Check
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

db = Database()
cfg = Config()
btn = Button()
add_func = Add_function()
check = Check()

# Configure logging
logging.basicConfig(level=logging.INFO)

@cfg.dp.message_handler(commands="start")
async def Start(message: types.Message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT time, tokens FROM users WHERE user_id=%s;""", (message.from_user.id, ))
        user = cursor.fetchone()
        if not user == None:
            if datetime.datetime.strptime(user[0], "%d/%m/%y %H:%M") >= datetime.datetime.now():
                time = datetime.datetime.strptime(user[0], "%d/%m/%y %H:%M") - datetime.datetime.now()
                await cfg.bot.send_message(message.from_user.id, "–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç %s !\n–¢—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â—ë "%(str(message.from_user.first_name)) + 
                str(time.days) + " –¥–Ω. " + await add_func.Change_time(time) +
                "\n–í–∞—à –±–∞–ª–∞–Ω—Å: %d —Ç–æ–∫–µ–Ω–æ–≤"%(int(user[1])), reply_markup=btn.markup)
            else: 
                await cfg.bot.send_message(message.from_user.id, "–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç %s !\n–¢—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ !\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –µ—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å"%(str(message.from_user.first_name)) +
                "\n–í–∞—à –±–∞–ª–∞–Ω—Å: %d —Ç–æ–∫–µ–Ω–æ–≤"%(int(user[1])), reply_markup=btn.markup)
            return
        elif " " in message.text:
            referrer = message.text.split()[1]
            if await check.onStart(referrer, message.from_user.id):
                await db.add_referral(message.from_user.id, referrer)
                if not await check.isReferrer(referrer):
                    await db.add_referral_for_analytics(referrer)
                await cfg.bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç {} !\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.".format(str(message.from_user.first_name)) +
                                                                "\n\n–≠—Ç–æ—Ç –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é.\n\n–ß—Ç–æ–±—ã –µ—ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É." +
                                                                "\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º, –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø—Ä–æ—á–µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", reply_markup=btn.inline_start)
                try:
                    await cfg.bot.send_message(referrer, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 10% —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–∞–∂–¥–æ–π –µ–≥–æ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.".format(str(message.from_user.first_name)))
                except:
                    pass
                return
        await cfg.bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç {} !\n\n–≠—Ç–æ—Ç –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é.\n\n–ß—Ç–æ–±—ã –µ—ë –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.".format(str(message.from_user.first_name)) + 
        "\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º, –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø—Ä–æ—á–µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.", reply_markup=btn.inline_start)

@cfg.dp.callback_query_handler(text="start")
async def process_callback_start(callback_query: types.CallbackQuery):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT EXISTS(SELECT user_id FROM users WHERE user_id=%s);""",(callback_query.from_user.id, ))
        user = cursor.fetchone()
        if user[0]: # Found in database
            await cfg.bot.answer_callback_query(callback_query_id=callback_query.id, text="–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")
        else:
            await cfg.bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
            
            await db.table_users(user_id=int(callback_query.from_user.id), 
            username=str(callback_query.from_user.username), 
            first_name=str(callback_query.from_user.first_name),
            send_message=False, 
            referral=await check.isReferral(callback_query.from_user.id))
            await cfg.bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!" +
                                                                    "\n–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω 1 —Å–∏–≥–Ω–∞–ª –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ!" +
                                                                    "\n\nüîÑ–û–∂–∏–¥–∞–π—Ç–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—é–¥–∞ –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –±–æ—Ç–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—åüö®" + 
                                                                    "\n\n–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É - @diptop_support", reply_markup=btn.markup)
            await cfg.bot.send_message(callback_query.from_user.id, "–ê –ø–æ–∫–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:", reply_markup=btn.info_start)

@cfg.dp.channel_post_handler(content_types='audio')
async def Send_audio(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_audio(user[0], message.audio.file_id)
            except:
                pass

@cfg.dp.channel_post_handler(content_types='document')
async def Send_document(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_document(user[0], message.document.file_id)
            except:
                pass

@cfg.dp.channel_post_handler(content_types='voice')
async def Send_voice(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_voice(user[0], message.voice.file_id)
            except:
                pass

@cfg.dp.channel_post_handler(content_types='video')
async def Send_video(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_video(user[0], message.video.file_id)
            except:
                pass

@cfg.dp.channel_post_handler(content_types='photo')
async def Send_photo(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_photo(user[0], message.photo[-1].file_id)
            except:
                pass

@cfg.dp.channel_post_handler(content_types='text')
async def Send_text(message):
    if await add_func.Check_ignore_words(message.text):
        if message.text == "‚úÖ BULL TREND":
            await cfg.trend_json.get_trend(param='w', new_trend="BULL TREND")
        elif message.text == "‚ùå BEAR TREND":
            await cfg.trend_json.get_trend(param='w', new_trend="BEAR TREND")
        with db.conn.cursor() as cursor:
            cursor.execute("""SELECT user_id, time FROM users WHERE send_message=false;""")
            users = cursor.fetchall()
            if users == None:
                return
            for user in users:
                try:
                    await cfg.bot.send_message(user[0], message.text)
                except:
                    pass
                if user[1] == None:
                    await db.sendMessage(user_id=user[0], send_message=True)
                    try:
                        await cfg.bot.send_message(user[0], "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚ùóÔ∏è\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", reply_markup=btn.inline_subscription) 
                    except:
                        pass

@cfg.dp.message_handler(lambda message: message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüè†') 
async def Last_time(message: types.Message):
    if await check.isUser(message.from_user.id):
        discount = ""
        if await check.isReferral(message.from_user.id):
            discount = "\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –¥–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: 1 –Ω–µ–¥–µ–ª—è = 3 —Ç–æ–∫–µ–Ω–∞"
        with db.conn.cursor() as cursor:
            cursor.execute("""SELECT time, send_message, tokens FROM users WHERE user_id = %s;""", (message.from_user.id, ))
            user = cursor.fetchone()
            buyers, new_users, active_users = await add_func.check_who_bought_referrals(message.from_user.id)
            if user[1]:
                await cfg.bot.send_message(message.from_user.id, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç DipTop" +
                "\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}".format(message.from_user.id) +
                "\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å !\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {} —Ç–æ–∫–µ–Ω–æ–≤".format(int(user[2])) +
                f"\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {new_users}" +
                f"\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {active_users}" +
                "\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–∫–∏–¥–∫–æ–π: %d%s"%(buyers, discount), reply_markup=btn.inline_buy)
            elif user[0] == None:
                await cfg.bot.send_message(message.from_user.id, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç DipTop" +
                "\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}".format(message.from_user.id) +
                "\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {} —Ç–æ–∫–µ–Ω–æ–≤".format(int(user[2])) +
                f"\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {new_users}" +
                f"\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {active_users}" +
                "\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–∫–∏–¥–∫–æ–π: %d%s"%(buyers, discount), reply_markup=btn.inline_buy)
            else:
                time = datetime.datetime.strptime(user[0], "%d/%m/%y %H:%M") - datetime.datetime.now()
                await cfg.bot.send_message(message.from_user.id, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç DipTop" +
                "\n\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}".format(message.from_user.id) +
                "\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ " + 
                str(time.days) + " –¥–Ω. " + await add_func.Change_time(time) +
                "\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {} —Ç–æ–∫–µ–Ω–æ–≤".format(int(user[2])) +
                f"\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {new_users}" +
                f"\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {active_users}" +
                "\n\n–†–µ—Ñ–µ—Ä–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–∫–∏–¥–∫–æ–π: %d%s"%(buyers, discount), reply_markup=btn.inline_buy
                )

@cfg.dp.callback_query_handler(text="token")
async def process_callback_add_tokens(callback_query: types.CallbackQuery):
    await cfg.bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT tokens FROM users WHERE user_id = %s;""", (callback_query.from_user.id, ))
        user = cursor.fetchone()
        await cfg.bot.send_message(callback_query.from_user.id, "%s —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É %d —Ç–æ–∫–µ–Ω–æ–≤\n–¶–µ–Ω–∞ 1 —Ç–æ–∫–µ–Ω–∞ = 1$ = %d —Ä—É–±."%(callback_query.from_user.first_name, user[0], add_func.Rate_usd()))
        await cfg.bot.send_message(callback_query.from_user.id, "–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=btn.markup_payment_method)
        await States.Set_payment_method.set()

@cfg.dp.message_handler(state=States.Set_payment_method) 
async def Set_payment_methods(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif message.text == "QIWI/–ö–∞—Ä—Ç–∞":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫: ", reply_markup=btn.markup_back)
        await States.Set_tokens.set()
    elif message.text == "USDT":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫: ", reply_markup=btn.markup_back)
        await States.Set_tokens_for_tether.set()
    elif message.text == "–ÆMoney/–ö–∞—Ä—Ç–∞":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫: ", reply_markup=btn.markup_back)
        await States.Set_umoney.set()

@cfg.dp.message_handler(state=States.Set_umoney) 
async def Set_tokens_for_crypto(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text):
        await state.finish()
        return
    await cfg.bot.send_message(message.from_user.id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –Ω–∞ {} —Ç–æ–∫–µ–Ω–æ–≤, –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å {} —Ä—É–±.".format(message.text, str(int(message.text)*add_func.Rate_usd())) +
    "\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –£–∫—Ä–∞–∏–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN", reply_markup=btn.markup)

    amount = int(message.text)*add_func.Rate_usd()

    id = await db.table_trans(user_id = int(message.from_user.id), 
                num = int(message.text), 
                time = (datetime.datetime.now() + datetime.timedelta(minutes=15)).strftime("%d/%m/%y %H:%M"),
                source="umoney")

    quickpay = Quickpay(
            receiver=cfg.umoney,
            quickpay_form="shop",
            targets="–ü–æ–∫—É–ø–∫–∞ %d —Ç–æ–∫–µ–Ω–æ–≤"%(int(message.text)),
            paymentType="SB",
            sum=amount,
            label=id
            )

    inline_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –ÆMoney', url=quickpay.redirected_url))
    mess = await cfg.bot.send_message(message.from_user.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—á—ë—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 15 –º–∏–Ω.", reply_markup=inline_kb)

    await db.add_message_for_trans(id = id, message_id = mess.message_id)
    await state.finish()

@cfg.dp.message_handler(state=States.Set_tokens_for_tether) 
async def Set_tokens_for_crypto(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text):
        await state.finish()
        return
    await cfg.bot.send_photo(message.from_user.id, photo=types.InputFile(cfg.photo_crypto),
                            caption="–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç–µ %s$\n\n"%(message.text) +
                            "–°–µ—Ç—å: Tron (TRC20)\nTYW8aXcotnssyQeQyB6xoayGKZtTC8Ty36\n\n" +
                            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ @diptop_support\n\n" +
                            "–í–º–µ—Å—Ç–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä\n\n" +
                            "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: %s"%(message.from_user.id), 
                            reply_to_message_id=message.message_id,
                            reply_markup=btn.markup)
    await state.finish()

@cfg.dp.message_handler(state=States.Set_tokens)
async def Set_tokens(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text):
        await state.finish()
        return

    await cfg.bot.send_message(message.from_user.id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –Ω–∞ %s —Ç–æ–∫–µ–Ω–æ–≤, –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å %s —Ä—É–±."%(message.text, str(int(message.text)*add_func.Rate_usd())), reply_markup=btn.markup)

    amount = int(message.text)*add_func.Rate_usd()

    id = await db.table_trans(user_id = int(message.from_user.id), 
                num = int(message.text), 
                time = (datetime.datetime.now() + datetime.timedelta(minutes=15)).strftime("%d/%m/%y %H:%M"),
                source="qiwi")

    new_bill = cfg.p2p.bill(bill_id=id, amount=amount, lifetime=15, currency="RUB", comment="–ü–æ–∫—É–ø–∫–∞ %d —Ç–æ–∫–µ–Ω–æ–≤"%(int(message.text)))
    inline_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç QIWI/–ö–∞—Ä—Ç–∞', url=new_bill.pay_url))
    mess = await cfg.bot.send_message(message.from_user.id, "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—á—ë—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ 15 –º–∏–Ω.", reply_markup=inline_kb)

    await db.add_message_for_trans(id = id, message_id = mess.message_id)
    await state.finish()

@cfg.dp.message_handler(lambda message: message.text == '–ü—Ä–∞–≤–∏–ª–∞üìã') 
async def Add_balance(message: types.Message):
    if await check.isUser(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–ö–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:", reply_markup=btn.inline_info)

#@cfg.dp.message_handler(lambda message: message.text == '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ãüíµ') 
#async def Add_balance(message: types.Message):
#    if await check.isUser(message.from_user.id):
#        await cfg.bot.send_message(message.from_user.id, "üîç –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –æ—Ç–ª–µ–∂–∏–≤–∞—é—â–∏—Ö—Å—è –±–æ—Ç–æ–º" +
#        "\n\nüîò BTC/USDT" +
#        "\nüîò FIL/USDT" +
#        "\nüîò FTM/USDT" +
#        "\nüîò WAVES/USDT" +
#        "\nüîò TRX/USDT" +
#        "\nüîò ADA/USDT" +
#        "\nüîò ENJ/USDT" +
#        "\nüîò ICP/USDT" +
#        "\nüîò VET/USDT" +
#        "\nüîò CHZ/USDT")
@cfg.dp.message_handler(lambda message: message.text == '–û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤üö®') 
async def Current_signals(message: types.Message):
    if await check.isUser(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–£–∑–Ω–∞—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=btn.signals)

@cfg.dp.message_handler(lambda message: message.text == '–û—Ç–∑—ã–≤—ã‚ùóÔ∏è') 
async def review(message: types.Message):
    if await check.isUser(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã:", reply_markup=btn.review)

@cfg.dp.message_handler(lambda message: message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚öí') 
async def support(message: types.Message):
    if await check.isUser(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @diptop_support")

#@cfg.dp.message_handler(lambda message: message.text == '–¢—Ä–µ–Ω–¥üìä') 
#async def Current_trend(message: types.Message):
#    if await check.isUser(message.from_user.id):
#        read_trend = await cfg.trend_json.get_trend(param='r')
#        current_trend = ''
#        if read_trend == "BULL TREND":
#            current_trend = '‚úÖ BULL TREND'
#        else:
#            current_trend = '‚ùå BEAR TREND'
#        await cfg.bot.send_message(message.from_user.id, "–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: %s"%(current_trend))

@cfg.dp.message_handler(lambda message: message.text == '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞üë•') 
async def support(message: types.Message):
    if await check.isUser(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ DipTop\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤ –±–æ—Ç –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É" +
                                                    "\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 10% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞." +
                                                    "\n\n–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞—à–µ–π —Å—Å—ã–ª–∫–æ–π, –ø–æ–ª—É—á–∏—Ç —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏" +
                                                    "\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/DipTop_Trade_bot?start={}".format(message.from_user.id))

@cfg.dp.callback_query_handler(text="subscription")
async def process_callback_add_subscription(callback_query: types.CallbackQuery):
    await cfg.bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    if await check.isReferral(callback_query.from_user.id):
        await cfg.bot.send_message(callback_query.from_user.id, "1 –Ω–µ–¥–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ = {0} —Ç–æ–∫–µ–Ω–æ–≤ = {0}$\n1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ = {1} —Ç–æ–∫–µ–Ω–æ–≤ = {1}$\n\n–° —É—á—ë—Ç–æ–º –≤–∞—à–µ–π —Å–∫–∏–¥–∫–∏:\n\n1 –Ω–µ–¥–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ = {2} —Ç–æ–∫–µ–Ω–æ–≤ = {2}$\n1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ = {3} —Ç–æ–∫–µ–Ω–æ–≤ = {3}$\n\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É?".format(cfg.cost_per_week, cfg.cost_per_month, cfg.discount_cost_per_week, cfg.discount_cost_per_month), reply_markup=btn.markup_month_day)
    else:
        await cfg.bot.send_message(callback_query.from_user.id, "1 –Ω–µ–¥–µ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ = {0} —Ç–æ–∫–µ–Ω–æ–≤ = {0}$\n1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ = {1} —Ç–æ–∫–µ–Ω–æ–≤ = {1}$\n\n–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É?".format(cfg.cost_per_week, cfg.cost_per_month), reply_markup=btn.markup_month_day)
    await States.Set_delta.set()

@cfg.dp.message_handler(state=States.Set_delta)
async def choose_method(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif message.text == "30 –¥–Ω–µ–π":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫-–≤–æ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=btn.markup_back)
        await States.Enter_months.set()
    elif message.text == "7 –¥–Ω–µ–π":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫-–≤–æ –Ω–µ–¥–µ–ª—å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=btn.markup_back)
        await States.Enter_weeks.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é :(", reply_markup=btn.markup)
        await state.finish()

@cfg.dp.message_handler(state=States.Enter_months)
async def edit_months(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text):
        await state.finish()
        return
    cost = 0
    if await check.isReferral(message.from_user.id):
        cost = cfg.discount_cost_per_month
    else:
        cost = cfg.cost_per_month
    await cfg.bot.send_message(message.from_user.id, "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ %d –º–µ—Å."%(int(message.text)), reply_markup=btn.markup)
    mess = await cfg.bot.send_message(message.from_user.id, "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å %d —Ç–æ–∫–µ–Ω–æ–≤."%(int(message.text)*cost),
    reply_markup=btn.inline_payment)
    await add_func.delete_previous_order(message.from_user.id)
    await db.table_orders(
        id_user=message.from_user.id,
        id_message=mess.message_id,
        week=False,
        num=int(message.text)
    )
    await state.finish()

@cfg.dp.message_handler(state=States.Enter_weeks)
async def edit_days(message: types.Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await state.finish()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=btn.markup)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text):
        await state.finish()
        return
    cost = 0
    if await check.isReferral(message.from_user.id):
        cost = cfg.discount_cost_per_week
    else:
        cost = cfg.cost_per_week
    await cfg.bot.send_message(message.from_user.id, "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ %d –Ω–µ–¥."%(int(message.text)), reply_markup=btn.markup)
    mess = await cfg.bot.send_message(message.from_user.id, "–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å %d —Ç–æ–∫–µ–Ω–æ–≤."%(int(message.text)*cost),
    reply_markup=btn.inline_payment)
    await add_func.delete_previous_order(message.from_user.id)
    await db.table_orders(
        id_user=message.from_user.id,
        id_message=mess.message_id,
        week=True,
        num=int(message.text)
    )
    await state.finish()
    
@cfg.dp.callback_query_handler(text="pay")
async def callback_button_pay(callback_query: types.CallbackQuery):
    with db.conn.cursor() as cursor_order:
        cursor_order.execute("""SELECT orders.week, orders.num, users.time, users.tokens, users.id, orders.id_message, users.referral_from FROM orders INNER JOIN users ON orders.id_user = users.id WHERE users.user_id = %s;""", (callback_query.from_user.id, ))
        order = cursor_order.fetchone()
        discount = False
        if await check.isReferral(callback_query.from_user.id):
            discount = True
        cost, time_long = await add_func.check_month_or_week(order[0], discount)
        if order[3] >= order[1] * cost:  
            await db.delete_referral(callback_query.from_user.id)
            if not order[6] == None:
                if order[0]:
                    await db.change_token(tokens = int(order[1]) * cfg.cashback_from_week, user_id = order[6], add = True)
                    try:
                        await cfg.bot.send_message(order[6], "–í–∞–º –Ω–∞ —Å—á—ë—Ç –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ %d —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."%(int(order[1]) * cfg.cashback_from_week))
                    except:
                        pass
                else:
                    await db.change_token(tokens = int(order[1]) * cfg.cashback_from_month, user_id = order[6], add = True)
                    try:
                        await cfg.bot.send_message(order[6], "–í–∞–º –Ω–∞ —Å—á—ë—Ç –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ %d —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—à–ª–∏ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."%(int(order[1]) * cfg.cashback_from_month))
                    except:
                        pass
            await db.change_token(
                user_id = callback_query.from_user.id,
                tokens = int(order[3]) - int(order[1]) * cost
            )
            await db.add_time(
                user_id = callback_query.from_user.id,
                time = await add_func.time_comparison(order[2], order[1], time_long)
            )
            await db.sendMessage(
                user_id = callback_query.from_user.id,
                send_message = False
            )
            await add_func.delete_this_order(user_id_tg=callback_query.from_user.id,
                                            user_id=order[4],
                                            message_id=order[5])
            await cfg.bot.send_message(callback_query.from_user.id, "¬´‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n" +
                                                                    "üîÑ –û–∂–∏–¥–∞–π—Ç–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å—é–¥–∞ –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –±–æ—Ç–∞.\n" + 
                                                                    "–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É - @diptop_support¬ª", reply_markup=btn.markup)
            return
        else:
            await add_func.delete_this_order(user_id_tg=callback_query.from_user.id,
                                            user_id=order[4],
                                            message_id=order[5])
            await cfg.bot.send_message(callback_query.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ !", reply_markup=btn.markup)
            await cfg.bot.send_message(callback_query.from_user.id, "–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç", reply_markup=btn.inline_token)
            return

# start admins code

@cfg.dp.message_handler(commands="admin")
async def admin(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await States.Admin.set()
        await cfg.bot.send_message(message.from_user.id, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {}".format(int(await db.get_count())) +
        "\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)

@cfg.dp.message_handler(lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å id –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', state=States.Admin) 
async def set_id(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω–æ–≤", reply_markup=btn.markup_back)
        await States.Set_user_id.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())
    
@cfg.dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', state=States.Admin) 
async def add_admin(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", reply_markup=btn.markup_back)
        await States.Add_admin_message.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥', state=States.Admin) 
async def change_trend(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π —Ç—Ä–µ–Ω–¥ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ–∫—É—â–∏–º?", reply_markup=btn.markup_trends)
        await States.Set_trend.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(state=States.Set_trend)
async def message_deleted_admin(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    elif message.text == "‚ùå BEAR TREND":
        await cfg.bot.send_message(message.from_user.id, "–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–¥: BEAR TREND")
        await cfg.trend_json.get_trend(param='w', new_trend="BEAR TREND")
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    elif message.text == "‚úÖ BULL TREND":
        await cfg.bot.send_message(message.from_user.id, "–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–¥: BULL TREND")
        await cfg.trend_json.get_trend(param='w', new_trend="BULL TREND")
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return

@cfg.dp.message_handler(lambda message: message.text == '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', state=States.Admin) 
async def add_admin(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        with db.conn.cursor() as cursor:
            cursor.execute("""SELECT admin_id, admins_name FROM admins;""")
            admins = cursor.fetchall()
            if admins == None:
                return
            for admin in admins:
                try:
                    await cfg.bot.send_message(message.from_user.id, "–ò–º—è: %s\nID: %s"%(admin[1], admin[0]))
                except:
                    pass
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', state=States.Admin) 
async def delete_admin(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=btn.markup_back)
        await States.Delete_admin_message.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(state=States.Add_admin_message, content_types=['game', 'photo', 'video','voice', 'audio', 'text', 'document', 'sticker', 'invoice']) 
async def message_new_admin(message):
    try:
        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
            await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
            await States.Admin.set()
        elif await check.isAdmin(message.forward_from.id):
            await cfg.bot.send_message(message.from_user.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=btn.markup_admin)
            await States.Admin.set()
        else:
            await db.add_admins(message.forward_from.id, message.forward_from.first_name)
            await cfg.bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"%(message.forward_from.first_name), reply_markup=btn.markup_admin)
            await States.Admin.set()
    except:
        await cfg.bot.send_message(message.from_user.id, "–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", reply_markup=btn.markup_admin)
        await States.Admin.set()

@cfg.dp.message_handler(state=States.Delete_admin_message)
async def message_deleted_admin(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    elif await check.isAdmin(message.text):
        if message.text == message.from_user.id:
            await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", reply_markup=btn.markup_admin)
            await States.Admin.set()
        else:
            await db.delete_admins(message.text)
            await cfg.bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", reply_markup=btn.markup_admin)
            await States.Admin.set()
    else: 
        await cfg.bot.send_message(message.from_user.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", reply_markup=btn.markup_admin)
        await States.Admin.set()

@cfg.dp.message_handler(state=States.Set_user_id) 
async def add_token_for_user(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
    elif await check.isUser(message.text):
        await db.set_user_token(message.text, message.from_user.id)
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=btn.markup_back)
        await States.Add_tokens_for_user.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!", reply_markup=btn.markup_admin)
        await States.Admin.set()

@cfg.dp.message_handler(state=States.Add_tokens_for_user) 
async def add_token_for_user(message: types.Message):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await States.Admin.set()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text, from_admin=True):
        await States.Admin.set()
        return

    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT users.user_id, users.referral_from FROM admins INNER JOIN users ON admins.id_user = users.id WHERE admins.admin_id = %s;""", (message.from_user.id, ))
        admins_user = cursor.fetchone()
        await db.change_token(
            user_id = admins_user[0], 
            tokens = int(message.text),
            add=True
            )
        if not admins_user[1] == None:
            await db.add_count_for_analytics(admins_user[1], int(message.text))
        await States.Admin.set()
        try:
            await cfg.bot.send_message(admins_user[0], "–í–∞—à —Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %d —Ç–æ–∫–µ–Ω."%(int(message.text)))
        except:
            await cfg.bot.send_message(message.from_user.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º!")
        await cfg.bot.send_message(message.from_user.id, "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=btn.markup_admin)

@cfg.dp.message_handler(state=States.Admin, commands="stop")
async def admin(message: types.Message, state: FSMContext):
    await state.finish()
    await cfg.bot.send_message(message.from_user.id, "–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=btn.markup)

@cfg.dp.message_handler(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', state=States.Admin) 
async def Send_message_from_admin(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n!!!\n\n–í–°–ï –í–ê–®–ò –°–û–û–ë–©–ï–ù–ò–Ø –ë–£–î–£–¢ –û–¢–ü–†–ê–í–õ–ï–ù–´ –ê–ö–¢–ò–í–ù–´–ú –ü–û–î–ü–ò–°–ß–ò–ö–ê–ú –ë–û–¢–ê\n\n!!!", reply_markup=btn.markup_back)
        await States.Admin_send_message.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(state=States.Admin_send_message, content_types='audio')
async def Send_audio(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_audio(user[0], message.audio.file_id)
            except:
                pass

@cfg.dp.message_handler(state=States.Admin_send_message, content_types='document')
async def Send_document(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_document(user[0], message.document.file_id)
            except:
                pass

@cfg.dp.message_handler(state=States.Admin_send_message, content_types='voice')
async def Send_voice(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_voice(user[0], message.voice.file_id)
            except:
                pass

@cfg.dp.message_handler(state=States.Admin_send_message, content_types='video')
async def Send_video(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_video(user[0], message.video.file_id)
            except:
                pass

@cfg.dp.message_handler(state=States.Admin_send_message, content_types='photo')
async def Send_photo(message):
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_photo(user[0], message.photo[-1].file_id)
            except:
                pass
# test
@cfg.dp.message_handler(state=States.Admin_send_message, content_types='text')
async def Send_text(message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    if message.text == "–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        with db.conn.cursor() as cursor:
            cursor.execute("""SELECT user_id FROM users;""")
            users = cursor.fetchall()
            if users == None:
                return
            for user in users:
                if not user[0] == 5037418573 or not user[0] == '5037418573':
                    try:
                        txt = "–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - ¬´+¬ª –∏ —É–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\n\n@diptop_support"
                        await cfg.bot.send_message(user[0], txt)
                    except:
                        pass
        return
    with db.conn.cursor() as cursor:
        cursor.execute("""SELECT user_id FROM users WHERE send_message=false;""")
        users = cursor.fetchall()
        if users == None:
            return
        for user in users:
            try:
                await cfg.bot.send_message(user[0], message.text)
            except:
                pass

@cfg.dp.callback_query_handler(text="new_test")
async def callback_button_pay(callback_query: types.CallbackQuery):
    await cfg.bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await cfg.bot.send_photo(callback_query.from_user.id, photo=types.InputFile(cfg.photo_crypto),
                            caption="–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n\n" +
                            "–°–µ—Ç—å: Tron (TRC20)\nTYW8aXcotnssyQeQyB6xoayGKZtTC8Ty36\n\n" +
                            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ @diptop_support\n\n" +
                            "–í–º–µ—Å—Ç–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä\n\n" +
                            "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: %s"%(callback_query.from_user.id),
                            reply_markup=btn.markup)

# checkCode
@cfg.dp.message_handler(lambda message: message.text == '–î–æ—Ö–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', state=States.Admin) 
async def set_users_tokens_from(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=btn.markup_back)
        await States.Set_tokens_from_user.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(state=States.Set_tokens_from_user) 
async def set_users_tokens_count(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    elif await check.isReferrer(message.text):
        with db.conn.cursor() as cursor:
            cursor.execute("""SELECT sold_tokens.counts, users.first_name FROM sold_tokens INNER JOIN users ON sold_tokens.user_id = users.id WHERE sold_tokens.user_id=(SELECT id FROM users WHERE user_id=%s);""", (message.text, ))
            user = cursor.fetchone()
            await cfg.bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s, —Å—É–º–º–∞—Ä–Ω–æ –∫—É–ø–∏–ª–∏ %s —Ç–æ–∫–µ–Ω–æ–≤."%(str(user[1]), str(user[0])), reply_markup=btn.markup_admin)
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    else:
        await cfg.bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É!")
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()

# ignore handlers

@cfg.dp.message_handler(lambda message: message.text == '–ò–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏–µ —Å–ª–æ–≤–∞', state=States.Admin) 
async def Ignore_words(message: types.Message):
    if await check.isAdmin(message.from_user.id):
        ignore_words = await add_func.ignore_words()
        if ignore_words == "–í –±–æ—Ç–µ –Ω–µ—Ç —Å–ª–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π !":
            await cfg.bot.send_message(message.from_user.id, ignore_words, reply_markup=btn.markup_ignore_no_words)
            await States.Ignore_no_words.set()
        else:
            await cfg.bot.send_message(message.from_user.id, ignore_words, reply_markup=btn.markup_ignore_words)
            await States.Ignore_words.set()
    else:
        await cfg.bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞\n–ù–∞–∂–º–∏—Ç–µ /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞", reply_markup=types.ReplyKeyboardRemove())

@cfg.dp.message_handler(state=States.Ignore_no_words) 
async def Ignore_no_words_menu(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–µ–µ —Å–ª–æ–≤–æ":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏–º–∏:\n\n–ë–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥—ë–Ω–æ–µ –≤–∞–º–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–ø–∏—Å–∞–Ω–æ –ª–∏ –ë–û–õ–¨–®–ò–ú–ò –±—É–∫–≤–∞–º–∏ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–º–∏", reply_markup=btn.markup_back)
        await States.Add_ignore_words.set()
        return

@cfg.dp.message_handler(state=States.Ignore_words) 
async def Ignore_words_menu(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        await States.Admin.set()
        return
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–µ–µ —Å–ª–æ–≤–æ":
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏–º–∏:\n\n–ë–æ—Ç –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥—ë–Ω–æ–µ –≤–∞–º–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–ø–∏—Å–∞–Ω–æ –ª–∏ –ë–û–õ–¨–®–ò–ú–ò –±—É–∫–≤–∞–º–∏ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–º–∏", reply_markup=btn.markup_back)
        await States.Add_ignore_words.set()
        return
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–µ–µ —Å–ª–æ–≤–æ": 
        await cfg.bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—â–∏—Ö:", reply_markup=btn.markup_back)
        await States.Del_ignore_words.set()
        return

@cfg.dp.message_handler(state=States.Add_ignore_words) 
async def Add_ignor_word(message: types.Message):
    await cfg.ignore_words_json.get_ignore_words(new_word=message.text, param="w")
    await cfg.bot.send_message(message.from_user.id, "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ !", reply_markup=btn.markup_admin)
    await States.Admin.set()

@cfg.dp.message_handler(state=States.Del_ignore_words) 
async def Set_index_to_del(message: types.Message):
    if message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        await States.Admin.set()
        await cfg.bot.send_message(message.from_user.id, "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /stop", reply_markup=btn.markup_admin)
        return
    elif await add_func.Chek_digit(message.from_user.id, message.text, from_admin=True):
        await States.Admin.set()
        return
    elif await add_func.get_ignore_word_index(message.text):
        await States.Admin.set()
        await cfg.bot.send_message(message.from_user.id, "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ !", reply_markup=btn.markup_admin)
        return
    else:
        await States.Admin.set()
        await cfg.bot.send_message(message.from_user.id, "–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ !", reply_markup=btn.markup_admin)
        return

# end admins code

async def scheduler_users():
    aioschedule.every().minute.do(Scheduler.Check_send_message)
    aioschedule.every(5).seconds.do(Scheduler.Check_transaction)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

# Run function with await
async def on_startup(_):
    asyncio.create_task(scheduler_users())

if __name__ == "__main__":
    executor.start_polling(cfg.dp, skip_updates=True, on_startup=on_startup)